name: Build and upload release artifacts

permissions:
  contents: write
  packages: write

on:
  release:
    types: [published]

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            # workspace-local sccache directory (cross-platform)
            ${{ github.workspace }}/.sccache
          # include OS and toolchain in key to avoid collisions across runners
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Create local sccache dir (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/.sccache

      - name: Create local sccache dir (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\.sccache" -Force | Out-Null

      - name: Install sccache (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cargo install --locked sccache || true

      - name: Install sccache (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo install --locked sccache || true

      - name: Build release (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export SCCACHE_DIR=${{ github.workspace }}/.sccache
          # Enable RUSTC_WRAPPER only if sccache is present (runner may not have it)
          if [ -x "$HOME/.cargo/bin/sccache" ]; then
            echo "sccache found; enabling RUSTC_WRAPPER"
            export RUSTC_WRAPPER=$HOME/.cargo/bin/sccache
          else
            echo "sccache not found; building without sccache"
          fi
          cargo build --manifest-path ./crates/ark-wallet-cli/Cargo.toml --release --target ${{ matrix.target }}

      - name: Build release (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\.sccache" -Force | Out-Null
          $env:SCCACHE_DIR = "$env:GITHUB_WORKSPACE\.sccache"
          # Enable RUSTC_WRAPPER only if sccache exists on the runner
          $sccachePath = Join-Path $env:USERPROFILE '.cargo\bin\sccache.exe'
          if (Test-Path $sccachePath) {
            Write-Host "sccache found at $sccachePath; enabling RUSTC_WRAPPER"
            $env:RUSTC_WRAPPER = $sccachePath
          } else {
            Write-Host 'sccache not found; building without sccache'
          }
          cargo build --manifest-path ./crates/ark-wallet-cli/Cargo.toml --release --target ${{ matrix.target }}

      - name: Create dist directory (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist

      - name: Create dist directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE\\dist" -Force | Out-Null

      - name: Package Windows artifact
        if: matrix.os == 'windows-latest'
        run: |
          powershell -Command "Compress-Archive -Path target/${{ matrix.target }}/release/ark-wallet.exe -DestinationPath dist/ark-wallet-${{ github.ref_name }}-${{ matrix.artifact_name }}.zip"

      - name: Package Linux artifact
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czf dist/ark-wallet-${{ github.ref_name }}-${{ matrix.artifact_name }}.tar.gz -C target/${{ matrix.target }}/release ark-wallet

      - name: Package macOS artifact
        if: matrix.os == 'macos-latest'
        run: |
          tar -czf dist/ark-wallet-${{ github.ref_name }}-${{ matrix.artifact_name }}.tar.gz -C target/${{ matrix.target }}/release ark-wallet

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
